import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.FlowLayout;
import com.jgoodies.forms.layout.FormLayout;
import com.jgoodies.forms.layout.ColumnSpec;
import com.jgoodies.forms.layout.RowSpec;
import com.jgoodies.forms.factories.FormFactory;


public class InfoPanel extends JPanel implements ActionListener{
	

	private JLabel name;
	private JLabel score;
	private JLabel livesLeft;
	private JLabel shield;
	private JLabel flags;

	
	
//-----------------------------------Constructor	
	public InfoPanel(String newName, int newScore, int startingLives, int startingShields, int startingFlags) 
	{	
		name = new JLabel(newName);
		score = new JLabel("Score: " + newScore);
		livesLeft = new JLabel("Lives Left: " + startingLives);
		shield = new JLabel("Shields: " + startingShields);
		flags = new JLabel("Flags Left: " + startingFlags);

		setupPanel();	
	}

//------------------------------------Methods that update the infopanel
	
	
	public void updateShield(int newShield)
	{
		this.shield.setText("");
		this.shield.setText("Shields: " + newShield);
		setupPanel();
	}
	
	
	public void updateScore(int newScore)
	{
		this.score.setText("");
		this.score.setText("Score: " + newScore);
		
		setupPanel();
		
	}
	
	public void updateLife(int newLives)
	{
		this.livesLeft.setText("");
		if(newLives <= -1){
			
			this.livesLeft.setText("Lives Left: INFINITE");
		}
		
		else{
			
		this.livesLeft.setText("Lives Left: " + newLives);
		
		}
		
		setupPanel();
	}

	public void updateFlags(int newFlags){
		
		this.flags.setText("Flags Left: " + newFlags);
	}
	
	
	public void setupPanel()
	{
		//complicated chunk generated by Eclipse Window Builder.
		setLayout(new FormLayout(new ColumnSpec[] {
				ColumnSpec.decode("100px"),
				ColumnSpec.decode("73px"),
				ColumnSpec.decode("100px"),
				ColumnSpec.decode("89px"),},
			new RowSpec[] {
				FormFactory.RELATED_GAP_ROWSPEC,
				RowSpec.decode("16px"),
				FormFactory.RELATED_GAP_ROWSPEC,
				FormFactory.DEFAULT_ROWSPEC,
				FormFactory.RELATED_GAP_ROWSPEC,
				FormFactory.DEFAULT_ROWSPEC,
				FormFactory.RELATED_GAP_ROWSPEC,
				FormFactory.DEFAULT_ROWSPEC,
				FormFactory.RELATED_GAP_ROWSPEC,
				FormFactory.DEFAULT_ROWSPEC,
				FormFactory.RELATED_GAP_ROWSPEC,
				FormFactory.DEFAULT_ROWSPEC,}));
		
		
		this.setBackground(Color.gray);
		
		name.setFont(new Font("Stencil", Font.BOLD, 20));
		name.setForeground(Color.white);
		this.add(name, "2, 2, 2, 1, left, fill");
		
		
		score.setFont(new Font("Stencil", Font.BOLD, 20));
		score.setForeground(Color.white);
		this.add(score, "1, 4, 2, 1, left, top");
	
		
		livesLeft.setFont(new Font("Stencil", Font.BOLD, 20));
		livesLeft.setForeground(Color.white);
		this.add(livesLeft, "1, 6, 2, 1, left, top");
	
		
		shield.setFont(new Font("Stencil", Font.BOLD, 20));
		shield.setForeground(Color.white);
		this.add(shield, "1, 8, 2, 1, left, bottom");
		
		flags.setFont(new Font("Stencil", Font.BOLD, 20));
		flags.setForeground(Color.WHITE);
		add(flags, "1, 10, 2, 1");


		this.setVisible(true);
	}

	//All actions in MainFrame
	@Override
	public void actionPerformed(ActionEvent event) 
	{

	}
}
